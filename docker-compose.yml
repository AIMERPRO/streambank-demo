services:
  tests:
    profiles: ["test"]
    build:
      context: .
      dockerfile: tests/Dockerfile
    working_dir: /app
    volumes:
      - .:/app:cached
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      PYTHONPATH: /app/backend
    depends_on:
      - db
      - redis

  db:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  web:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    restart: unless-stopped
    volumes:
      - .:/app:cached
    env_file:
      - .env
    depends_on:
      - db
    ports:
      - "8000:8000"

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8001
    depends_on:
      - db
    ports:
      - "8001:8001"

  redis:
    image: redis:6
    ports:
      - "6379:6379"

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A config.celery_app worker --loglevel=info
    volumes:
      - .:/app:cached
    env_file:
      - .env
    depends_on:
      - redis
      - db
      - web

  beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A config.celery_app beat --loglevel=info
    volumes:
      - .:/app:cached
    env_file:
      - .env
    depends_on:
      - redis
      - db
      - web

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "3000:3000"

  flower:
    image: mher/flower:2.0.0
    env_file:
      - .env
    ports:
      - "5555:5555"
    depends_on: [ redis, worker ]

  migrate:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: >
      sh -c "
        python manage.py migrate --noinput
      "
    env_file:
      - .env
    depends_on:
      - db

volumes:
  db_data:
